/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DataColumnService } from "../dataColumn.service";
import { DataColumnCreateInput } from "./DataColumnCreateInput";
import { DataColumn } from "./DataColumn";
import { DataColumnFindManyArgs } from "./DataColumnFindManyArgs";
import { DataColumnWhereUniqueInput } from "./DataColumnWhereUniqueInput";
import { DataColumnUpdateInput } from "./DataColumnUpdateInput";

export class DataColumnControllerBase {
  constructor(protected readonly service: DataColumnService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DataColumn })
  async createDataColumn(
    @common.Body() data: DataColumnCreateInput
  ): Promise<DataColumn> {
    return await this.service.createDataColumn({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DataColumn] })
  @ApiNestedQuery(DataColumnFindManyArgs)
  async dataColumns(@common.Req() request: Request): Promise<DataColumn[]> {
    const args = plainToClass(DataColumnFindManyArgs, request.query);
    return this.service.dataColumns({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DataColumn })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async dataColumn(
    @common.Param() params: DataColumnWhereUniqueInput
  ): Promise<DataColumn | null> {
    const result = await this.service.dataColumn({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DataColumn })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDataColumn(
    @common.Param() params: DataColumnWhereUniqueInput,
    @common.Body() data: DataColumnUpdateInput
  ): Promise<DataColumn | null> {
    try {
      return await this.service.updateDataColumn({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DataColumn })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDataColumn(
    @common.Param() params: DataColumnWhereUniqueInput
  ): Promise<DataColumn | null> {
    try {
      return await this.service.deleteDataColumn({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
