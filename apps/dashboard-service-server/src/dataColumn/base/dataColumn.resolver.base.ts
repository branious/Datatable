/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DataColumn } from "./DataColumn";
import { DataColumnCountArgs } from "./DataColumnCountArgs";
import { DataColumnFindManyArgs } from "./DataColumnFindManyArgs";
import { DataColumnFindUniqueArgs } from "./DataColumnFindUniqueArgs";
import { DeleteDataColumnArgs } from "./DeleteDataColumnArgs";
import { DataColumnService } from "../dataColumn.service";
@graphql.Resolver(() => DataColumn)
export class DataColumnResolverBase {
  constructor(protected readonly service: DataColumnService) {}

  async _dataColumnsMeta(
    @graphql.Args() args: DataColumnCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DataColumn])
  async dataColumns(
    @graphql.Args() args: DataColumnFindManyArgs
  ): Promise<DataColumn[]> {
    return this.service.dataColumns(args);
  }

  @graphql.Query(() => DataColumn, { nullable: true })
  async dataColumn(
    @graphql.Args() args: DataColumnFindUniqueArgs
  ): Promise<DataColumn | null> {
    const result = await this.service.dataColumn(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DataColumn)
  async deleteDataColumn(
    @graphql.Args() args: DeleteDataColumnArgs
  ): Promise<DataColumn | null> {
    try {
      return await this.service.deleteDataColumn(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
