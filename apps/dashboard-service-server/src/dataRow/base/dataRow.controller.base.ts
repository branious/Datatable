/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DataRowService } from "../dataRow.service";
import { DataRowCreateInput } from "./DataRowCreateInput";
import { DataRow } from "./DataRow";
import { DataRowFindManyArgs } from "./DataRowFindManyArgs";
import { DataRowWhereUniqueInput } from "./DataRowWhereUniqueInput";
import { DataRowUpdateInput } from "./DataRowUpdateInput";

export class DataRowControllerBase {
  constructor(protected readonly service: DataRowService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DataRow })
  async createDataRow(
    @common.Body() data: DataRowCreateInput
  ): Promise<DataRow> {
    return await this.service.createDataRow({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DataRow] })
  @ApiNestedQuery(DataRowFindManyArgs)
  async dataRows(@common.Req() request: Request): Promise<DataRow[]> {
    const args = plainToClass(DataRowFindManyArgs, request.query);
    return this.service.dataRows({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DataRow })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async dataRow(
    @common.Param() params: DataRowWhereUniqueInput
  ): Promise<DataRow | null> {
    const result = await this.service.dataRow({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DataRow })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDataRow(
    @common.Param() params: DataRowWhereUniqueInput,
    @common.Body() data: DataRowUpdateInput
  ): Promise<DataRow | null> {
    try {
      return await this.service.updateDataRow({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DataRow })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDataRow(
    @common.Param() params: DataRowWhereUniqueInput
  ): Promise<DataRow | null> {
    try {
      return await this.service.deleteDataRow({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
