/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DataRow } from "./DataRow";
import { DataRowCountArgs } from "./DataRowCountArgs";
import { DataRowFindManyArgs } from "./DataRowFindManyArgs";
import { DataRowFindUniqueArgs } from "./DataRowFindUniqueArgs";
import { DeleteDataRowArgs } from "./DeleteDataRowArgs";
import { DataRowService } from "../dataRow.service";
@graphql.Resolver(() => DataRow)
export class DataRowResolverBase {
  constructor(protected readonly service: DataRowService) {}

  async _dataRowsMeta(
    @graphql.Args() args: DataRowCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DataRow])
  async dataRows(
    @graphql.Args() args: DataRowFindManyArgs
  ): Promise<DataRow[]> {
    return this.service.dataRows(args);
  }

  @graphql.Query(() => DataRow, { nullable: true })
  async dataRow(
    @graphql.Args() args: DataRowFindUniqueArgs
  ): Promise<DataRow | null> {
    const result = await this.service.dataRow(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DataRow)
  async deleteDataRow(
    @graphql.Args() args: DeleteDataRowArgs
  ): Promise<DataRow | null> {
    try {
      return await this.service.deleteDataRow(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
