/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, DataRow as PrismaDataRow } from "@prisma/client";

export class DataRowServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.DataRowCountArgs, "select">): Promise<number> {
    return this.prisma.dataRow.count(args);
  }

  async dataRows<T extends Prisma.DataRowFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DataRowFindManyArgs>
  ): Promise<PrismaDataRow[]> {
    return this.prisma.dataRow.findMany<Prisma.DataRowFindManyArgs>(args);
  }
  async dataRow<T extends Prisma.DataRowFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DataRowFindUniqueArgs>
  ): Promise<PrismaDataRow | null> {
    return this.prisma.dataRow.findUnique(args);
  }
  async createDataRow<T extends Prisma.DataRowCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DataRowCreateArgs>
  ): Promise<PrismaDataRow> {
    return this.prisma.dataRow.create<T>(args);
  }
  async updateDataRow<T extends Prisma.DataRowUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DataRowUpdateArgs>
  ): Promise<PrismaDataRow> {
    return this.prisma.dataRow.update<T>(args);
  }
  async deleteDataRow<T extends Prisma.DataRowDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.DataRowDeleteArgs>
  ): Promise<PrismaDataRow> {
    return this.prisma.dataRow.delete(args);
  }
}
