/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, DataTable as PrismaDataTable } from "@prisma/client";

export class DataTableServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DataTableCountArgs, "select">
  ): Promise<number> {
    return this.prisma.dataTable.count(args);
  }

  async dataTables<T extends Prisma.DataTableFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DataTableFindManyArgs>
  ): Promise<PrismaDataTable[]> {
    return this.prisma.dataTable.findMany<Prisma.DataTableFindManyArgs>(args);
  }
  async dataTable<T extends Prisma.DataTableFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DataTableFindUniqueArgs>
  ): Promise<PrismaDataTable | null> {
    return this.prisma.dataTable.findUnique(args);
  }
  async createDataTable<T extends Prisma.DataTableCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DataTableCreateArgs>
  ): Promise<PrismaDataTable> {
    return this.prisma.dataTable.create<T>(args);
  }
  async updateDataTable<T extends Prisma.DataTableUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DataTableUpdateArgs>
  ): Promise<PrismaDataTable> {
    return this.prisma.dataTable.update<T>(args);
  }
  async deleteDataTable<T extends Prisma.DataTableDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.DataTableDeleteArgs>
  ): Promise<PrismaDataTable> {
    return this.prisma.dataTable.delete(args);
  }
}
