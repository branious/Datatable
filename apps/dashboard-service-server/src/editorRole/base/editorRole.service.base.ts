/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, EditorRole as PrismaEditorRole } from "@prisma/client";

export class EditorRoleServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.EditorRoleCountArgs, "select">
  ): Promise<number> {
    return this.prisma.editorRole.count(args);
  }

  async editorRoles<T extends Prisma.EditorRoleFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.EditorRoleFindManyArgs>
  ): Promise<PrismaEditorRole[]> {
    return this.prisma.editorRole.findMany<Prisma.EditorRoleFindManyArgs>(args);
  }
  async editorRole<T extends Prisma.EditorRoleFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.EditorRoleFindUniqueArgs>
  ): Promise<PrismaEditorRole | null> {
    return this.prisma.editorRole.findUnique(args);
  }
  async createEditorRole<T extends Prisma.EditorRoleCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.EditorRoleCreateArgs>
  ): Promise<PrismaEditorRole> {
    return this.prisma.editorRole.create<T>(args);
  }
  async updateEditorRole<T extends Prisma.EditorRoleUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.EditorRoleUpdateArgs>
  ): Promise<PrismaEditorRole> {
    return this.prisma.editorRole.update<T>(args);
  }
  async deleteEditorRole<T extends Prisma.EditorRoleDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.EditorRoleDeleteArgs>
  ): Promise<PrismaEditorRole> {
    return this.prisma.editorRole.delete(args);
  }
}
