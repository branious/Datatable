/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  UserData as PrismaUserData,
  User as PrismaUser,
} from "@prisma/client";

export class UserDataServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.UserDataCountArgs, "select">): Promise<number> {
    return this.prisma.userData.count(args);
  }

  async userDataItems<T extends Prisma.UserDataFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserDataFindManyArgs>
  ): Promise<PrismaUserData[]> {
    return this.prisma.userData.findMany<Prisma.UserDataFindManyArgs>(args);
  }
  async userData<T extends Prisma.UserDataFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserDataFindUniqueArgs>
  ): Promise<PrismaUserData | null> {
    return this.prisma.userData.findUnique(args);
  }
  async createUserData<T extends Prisma.UserDataCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserDataCreateArgs>
  ): Promise<PrismaUserData> {
    return this.prisma.userData.create<T>(args);
  }
  async updateUserData<T extends Prisma.UserDataUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserDataUpdateArgs>
  ): Promise<PrismaUserData> {
    return this.prisma.userData.update<T>(args);
  }
  async deleteUserData<T extends Prisma.UserDataDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserDataDeleteArgs>
  ): Promise<PrismaUserData> {
    return this.prisma.userData.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.userData
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
